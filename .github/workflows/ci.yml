name: CI

on: 
  push:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: 'pages'
  cancel-in-progress: false

jobs:
  eslint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20.11.0
          cache: "npm"
      - run: npm ci
      - run: npm run lint:fix

  prettier:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20.11.0
          cache: "npm"
      - run: npm ci
      - run: npm run format:fix

  test:
    needs: [eslint, prettier]
    # environment:
    #   name: github-pages
    #   url: ${{ steps.deployment.outputs.page_url }}

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20.11.0
          cache: 'npm'
      - run: npm ci
      - run: cp .env.example .env
      - run: npm run test || true
        env:
          CI: true
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: jest_html_reporters
          path: jest_html_reporters.html

  pages:
    runs-on: ubuntu-latest
    needs: [test]
    steps:
      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: jest_html_reporters
          path: jest_html_reporters.html

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          # path: 'jest_html_reporters.html'
          name: jest_html_reporters  # Name of the artifact
          path: jest_html_reporters.html

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        with:
          name: jest_html_reporters
          path: jest_html_reporters.html

  notification:
    if: always()
    needs: [eslint, prettier, test]
    runs-on: ubuntu-latest
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: jest_html_reporters
          path: jest_html_reporters.html  # Path to the artifact within the workflow
  
      - run: |
          curl --request POST \
          --url https://api.telegram.org/bot7111796883:AAETIeg0IUblR_EuBOrIBok1NIEjhEgoJNk/sendMessage \
          --header 'Content-Type: application/json' \
          --data '{"chat_id": "-1002066264187", "text": "Report link: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}" \
          --data-binary @jest_html_reporters.html'  # Pass the artifact to curl using command substitution
        

  # notification:
  #   if: always()
  #   needs: [eslint, prettier, test]

  #   # environment:
  #   #   name: github-pages
  #   #   url: ${{ steps.deployment.outputs.page_url }}

  #   runs-on: ubuntu-latest
  #   steps:
  #     - run: |
  #         curl --request POST \
  #         --url https://api.telegram.org/bot7111796883:AAETIeg0IUblR_EuBOrIBok1NIEjhEgoJNk/sendMessage \
  #         --header 'Content-Type: application/json' \
  #         --data '{"chat_id": "-1002066264187", "text": "Report link: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}" }'

  # docker:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Build the Docker image
  #       run: docker build . --file Dockerfile --tag auto:$(date +%s)

  # container-test-job:
  #   runs-on: ubuntu-latest
  #   container:
  #     image: node:18
  #     env:
  #       NODE_ENV: development
  #     ports:
  #       - 80
  #     volumes:
  #       - my_docker_volume:/volume_mount
  #     options: --cpus 1
  #   steps:
  #     - name: Check for dockerenv file
  #       run: (ls /.dockerenv && echo Found dockerenv) || (echo No dockerenv)
  # curl --request POST \
  # --url https://api.telegram.org/bot${{secrets.TEST_TELEGRAM_TOKEN}}/sendMessage \
  # --header 'Content-Type: application/json' \
  # --data '{ "chat_id": "${{secrets.TEST_TELEGRAM_CHAT_ID}}", "text": "Report link: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}" }'

